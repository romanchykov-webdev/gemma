import { getCartDetails } from "@/lib";
import { CartStateItem } from "@/lib/get-cart-details";
import { create } from "zustand";
import { Api } from "../../services/api-client";
import { CreateCartItemValuesOptimistic } from "../../services/dto/cart.dto";

import { devtools } from "zustand/middleware";

export interface CartState {
	loading: boolean;
	error: boolean;
	totalAmount: number;
	items: CartStateItem[];
	isFetched: boolean; // ‚úÖ –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
	syncing: boolean; // ‚úÖ –§–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ checkout)
	fetchCartItems: () => Promise<void>;
	refetchCart: () => Promise<void>; // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è checkout
	updateItemQuantity: (id: string, quantity: number) => Promise<void>;
	addCartItem: (values: CreateCartItemValuesOptimistic) => void; // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ optimistic updates
	removeCartItem: (id: string) => Promise<void>;
}

// export const useCartStore = create<CartState>((set, get) => ({
// 	items: [],
// 	error: false,
// 	loading: true,
// 	totalAmount: 0,

// 	fetchCartItems: async () => {
// 		try {
// 			set({ loading: true, error: false });
// 			const data = await Api.cart.getCart();
// 			set(getCartDetails(data));
// 		} catch (error) {
// 			console.error(error);
// 			set({ error: true });
// 		} finally {
// 			set({ loading: false });
// 		}
// 	},

// 	// ‚ö° –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI!
// 	updateItemQuantity: async (id: string, quantity: number) => {
// 		const state = get();
// 		const prevItems = [...state.items];
// 		const prevTotalAmount = state.totalAmount;

// 		try {
// 			// 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ò —Ü–µ–Ω—É –≤ UI
// 			const updatedItems = state.items.map((item) => {
// 				if (item.id === id) {
// 					// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ item
// 					const pricePerOne = item.price / item.quantity; // —Ü–µ–Ω–∞ 1 —à—Ç—É–∫–∏
// 					const newPrice = pricePerOne * quantity; // –Ω–æ–≤–∞—è —Ü–µ–Ω–∞
// 					return { ...item, quantity, price: newPrice };
// 				}
// 				return item;
// 			});

// 			// 2) –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º totalAmount –ª–æ–∫–∞–ª—å–Ω–æ (–ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–µ–º!)
// 			const newTotalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);

// 			// 3) –û–±–Ω–æ–≤–ª—è–µ–º UI –ë–ï–ó loading!
// 			set({
// 				items: updatedItems,
// 				totalAmount: Math.round(newTotalAmount),
// 				error: false,
// 			});

// 			// 4) –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ–Ω–µ (—Å–∫—Ä—ã—Ç–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥—ë—Ç!)
// 			await Api.cart.updateItemQuantity(id, quantity);

// 			// 5) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (—Ç–∏—Ö–æ –≤ —Ñ–æ–Ω–µ)
// 			const data = await Api.cart.getCart();
// 			set({ ...getCartDetails(data), error: false });
// 		} catch (error) {
// 			console.error(error);
// 			// –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
// 			set({
// 				items: prevItems,
// 				totalAmount: prevTotalAmount,
// 				error: true,
// 			});
// 		}
// 	},

// 	// addCartItem: async (values: CreateCartItemValues) => {
// 	// 	try {
// 	// 		set({ loading: true, error: false });
// 	// 		await Api.cart.addCartItem(values);
// 	// 		await get().fetchCartItems();
// 	// 	} catch (error) {
// 	// 		console.error(error);
// 	// 		set({ error: true });
// 	// 	} finally {
// 	// 		set({ loading: false });
// 	// 	}
// 	// },
// 	addCartItem: async (values: CreateCartItemValues) => {
// 		try {
// 			// –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI! –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ–Ω–µ
// 			set({ error: false });

// 			// –ó–∞–ø—Ä–æ—Å –∏–¥—ë—Ç –≤ —Ñ–æ–Ω–µ
// 			await Api.cart.addCartItem(values);

// 			// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
// 			await get().fetchCartItems();
// 		} catch (error) {
// 			console.error(error);
// 			set({ error: true });
// 		}
// 	},

// 	// ‚ö° –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ UI
// 	removeCartItem: async (id: string) => {
// 		const state = get();
// 		const prevItems = [...state.items];
// 		const prevTotalAmount = state.totalAmount;

// 		try {
// 			// 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ UI
// 			const updatedItems = state.items.filter((item) => item.id !== id);

// 			// 2) –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
// 			const newTotalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);

// 			// 3) –û–±–Ω–æ–≤–ª—è–µ–º UI –ë–ï–ó loading
// 			set({
// 				items: updatedItems,
// 				totalAmount: newTotalAmount,
// 				error: false,
// 			});

// 			// 4) –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ–Ω–µ
// 			await Api.cart.removeCartItem(id);

// 			// 5) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
// 			const data = await Api.cart.getCart();
// 			set({ ...getCartDetails(data), error: false });
// 		} catch (error) {
// 			console.error(error);
// 			// –û—Ç–∫–∞—Ç
// 			set({
// 				items: prevItems,
// 				totalAmount: prevTotalAmount,
// 				error: true,
// 			});
// 		}
// 	},
// }));

export const useCartStore = create<CartState>()(
	devtools(
		(set, get) => ({
			items: [],
			error: false,
			loading: false,
			totalAmount: 0,
			isFetched: false, // ‚úÖ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
			syncing: false, // ‚úÖ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è

			fetchCartItems: async () => {
				const state = get();

				// ‚úÖ –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ - –ù–ï –≥—Ä—É–∑–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
				if (state.isFetched) {
					console.log("‚úÖ Cart already fetched, skipping API call...");
					return;
				}

				try {
					set({ loading: true, error: false });
					const data = await Api.cart.getCart();
					set({
						...getCartDetails(data),
						isFetched: true, // ‚úÖ –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏
					});
				} catch (error) {
					console.error(error);
					set({ error: true });
				} finally {
					set({ loading: false });
				}
			},

			// üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è checkout (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç isFetched)
			refetchCart: async () => {
				try {
					set({ loading: true, error: false, syncing: true });
					const data = await Api.cart.getCart();
					set({
						...getCartDetails(data),
						isFetched: true,
					});
				} catch (error) {
					console.error(error);
					set({ error: true });
				} finally {
					set({ loading: false, syncing: false });
				}
			},

			// ‚ö° –ü–û–õ–ù–û–°–¢–¨–Æ –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ Zustand, —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
			updateItemQuantity: async (id: string, quantity: number) => {
				const state = get();
				const prevItems = [...state.items];
				const prevTotalAmount = state.totalAmount;

				try {
					// 1Ô∏è‚É£ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI (–ª–æ–∫–∞–ª—å–Ω–æ –≤ Zustand)
					const updatedItems = state.items.map((item) => {
						if (item.id === id) {
							const pricePerOne = item.price / item.quantity;
							const newPrice = pricePerOne * quantity;
							return { ...item, quantity, price: newPrice };
						}
						return item;
					});

					const newTotalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);

					set({
						items: updatedItems,
						totalAmount: Math.round(newTotalAmount),
						error: false,
					});

					// 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º store –∏–∑ –æ—Ç–≤–µ—Ç–∞)
					Api.cart.updateItemQuantity(id, quantity).catch((error) => {
						console.error("[CART] Update failed:", error);
						// –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
						set({
							items: prevItems,
							totalAmount: prevTotalAmount,
							error: true,
						});
					});
				} catch (error) {
					console.error(error);
					// –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
					set({
						items: prevItems,
						totalAmount: prevTotalAmount,
						error: true,
					});
				}
			},

			// ‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï —Å optimistic update
			addCartItem: (values: CreateCartItemValuesOptimistic) => {
				const state = get();

				// 1Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å optimistic –¥–∞–Ω–Ω—ã–µ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
				if (values.optimistic) {
					const tempId = `temp-${Date.now()}`; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID

					const tempItem: CartStateItem = {
						id: tempId,
						quantity: 1,
						name: values.optimistic.name,
						imageUrl: values.optimistic.imageUrl,
						price: values.optimistic.price,
						pizzaSize: values.optimistic.pizzaSize,
						pizzaType: values.optimistic.pizzaType,
						ingredients: values.optimistic.ingredientsData || [],
					};

					// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ store
					set({
						items: [...state.items, tempItem],
						totalAmount: state.totalAmount + tempItem.price,
						error: false,
					});
				}

				// 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–±–µ–∑ optimistic –¥–∞–Ω–Ω—ã—Ö)
				Api.cart
					.addCartItem({
						productItemId: values.productItemId,
						ingredients: values.ingredients,
					})
					.then((data) => {
						// ‚úÖ –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
						set({
							...getCartDetails(data),
							error: false,
							isFetched: true,
						});
					})
					.catch((error) => {
						console.error("[CART] Add failed:", error);
						// –û—Ç–∫–∞—Ç optimistic update –ø—Ä–∏ –æ—à–∏–±–∫–µ
						if (values.optimistic) {
							set({
								items: state.items,
								totalAmount: state.totalAmount,
								error: true,
							});
						} else {
							set({ error: true });
						}
					});
			},

			// ‚ö° –ü–û–õ–ù–û–°–¢–¨–Æ –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ Zustand, —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
			removeCartItem: async (id: string) => {
				const state = get();
				const prevItems = [...state.items];
				const prevTotalAmount = state.totalAmount;

				try {
					// 1Ô∏è‚É£ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ UI (–ª–æ–∫–∞–ª—å–Ω–æ –≤ Zustand)
					const updatedItems = state.items.filter((item) => item.id !== id);
					const newTotalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);

					set({
						items: updatedItems,
						totalAmount: newTotalAmount,
						error: false,
					});

					// 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º store –∏–∑ –æ—Ç–≤–µ—Ç–∞)
					Api.cart.removeCartItem(id).catch((error) => {
						console.error("[CART] Remove failed:", error);
						// –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
						set({
							items: prevItems,
							totalAmount: prevTotalAmount,
							error: true,
						});
					});
				} catch (error) {
					console.error(error);
					// –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
					set({
						items: prevItems,
						totalAmount: prevTotalAmount,
						error: true,
					});
				}
			},
		}),
		{ name: "CartStore" },
	),
);
